{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Jorya777/Jorya777/blob/main/final%20assignment%20(Dashboard)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "f6603cae",
      "metadata": {
        "id": "f6603cae"
      },
      "source": [
        "\n",
        "# üìù Python for Public Policy ‚Äî Session 3 Worksheet  \n",
        "**Theme:** Text Analysis with NLTK (Inaugural Speeches or Your Own `.txt`)\n",
        "\n",
        "Use this notebook during the 60‚Äëminute student-driven block. **No presentations** at the end.  \n",
        "You may analyze an NLTK inaugural speech **or** upload your own plain text file (`.txt`).\n",
        "\n",
        "**Timing guide:**  \n",
        "- Part A: 10 min ¬∑ Part B: 10 min ¬∑ Part C: 10 min ¬∑ Part D: 10 min ¬∑ Part E: 10 min ¬∑ Part F: 10 min\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "f5a58467",
      "metadata": {
        "id": "f5a58467"
      },
      "source": [
        "\n",
        "## Part 0 ‚Äî Setup (run once)\n",
        "Upgrade NLTK (Colab often pins an older version) and download the datasets we need.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "68206010",
      "metadata": {
        "id": "68206010",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0847a0cf-b1e0-4b77-b2b3-6586c8f14e7c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[?25l   \u001b[90m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m \u001b[32m0.0/1.5 MB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[91m‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[90m‚ï∫\u001b[0m\u001b[90m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m \u001b[32m0.1/1.5 MB\u001b[0m \u001b[31m3.5 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K   \u001b[91m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[91m‚ï∏\u001b[0m\u001b[90m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m \u001b[32m0.6/1.5 MB\u001b[0m \u001b[31m8.1 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K   \u001b[91m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[91m‚ï∏\u001b[0m \u001b[32m1.5/1.5 MB\u001b[0m \u001b[31m14.9 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K   \u001b[90m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m \u001b[32m1.5/1.5 MB\u001b[0m \u001b[31m12.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hNLTK version: 3.9.1\n"
          ]
        }
      ],
      "source": [
        "\n",
        "# We upgrade NLTK to the latest version so functions and data work as expected.\n",
        "!pip -q install -U nltk\n",
        "\n",
        "# Now we import nltk and download only the small packages we need for this session.\n",
        "import nltk\n",
        "needed = [\"punkt_tab\",           # tokenizer (splits text into words)\n",
        "          \"stopwords\",       # list of common words to remove (the, and, is, ...)\n",
        "          \"wordnet\",         # lexical database used for lemmatization (getting word roots)\n",
        "          \"averaged_perceptron_tagger_eng\",  # part-of-speech tagger (N/V/Adj/Adv)\n",
        "          \"inaugural\"]       # a small corpus of U.S. inaugural addresses\n",
        "for pkg in needed:\n",
        "    nltk.download(pkg, quiet=True) # no status text printed - just downloads\n",
        "\n",
        "print(\"NLTK version:\", nltk.__version__)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "5b9e4e1d",
      "metadata": {
        "id": "5b9e4e1d"
      },
      "source": [
        "\n",
        "## Part A ‚Äî Pick Your Text (10 min)\n",
        "Choose **one** source below.\n",
        "\n",
        "### Option 1 ‚Äî Use the built-in Inaugural Speeches corpus\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "40d2ad51",
      "metadata": {
        "id": "40d2ad51",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5402ea2c-eb04-462f-ae15-955cdf70b700"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Analyzing: 2009-Obama.txt | characters: 13439\n"
          ]
        }
      ],
      "source": [
        "\n",
        "from nltk.corpus import inaugural\n",
        "fileids = inaugural.fileids()\n",
        "fileids[:10]  # preview a few\n",
        "# Choose one speech (change the index or pick a specific filename from 'fileids')\n",
        "s1 = fileids[-5]\n",
        "raw = inaugural.raw(s1)\n",
        "print(\"Analyzing:\", s1, \"| characters:\", len(raw))\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "71e8e1a3",
      "metadata": {
        "id": "71e8e1a3"
      },
      "source": [
        "\n",
        "### Option 2 ‚Äî Upload your own `.txt`\n",
        "> Must be **plain text** (e.g., speech, policy memo, report). If you upload multiple files, we‚Äôll read the first one.\n",
        "\n",
        "\n",
        "If you don‚Äôt already have a `.txt` file (like the inaugural corpus examples), you can **make one directly in Colab**.  \n",
        "This is helpful if you want to analyze text copied from a website, a PDF, or your own writing.\n",
        "\n",
        "üìù Example: paste any text (such as a news article, policy speech, or blog post) into the triple quotes below."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "02ed2b83",
      "metadata": {
        "id": "02ed2b83",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ec406e3d-3567-4fd9-fde0-b0606326cbfb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "‚úÖ Saved mytext.txt\n",
            "Why do rents drop in response to expansionary monetary policy? When interest rates drop, borrowing becomes less expensive, making it easier for many households ‚Äî especially first-time and lower-income buyers ‚Äî to purchase homes. As a result, more people exit the rental market, lowering demand for rental housing and placing downward pressure on rents. Our results show that as demand for owner-occupied housing increases and demand for rental housing drops, real estate investors sell homes to owner\n"
          ]
        }
      ],
      "source": [
        "\n",
        "# Create a plain-text file in Colab\n",
        "text = \"\"\"Why do rents drop in response to expansionary monetary policy? When interest rates drop, borrowing becomes less expensive, making it easier for many households ‚Äî especially first-time and lower-income buyers ‚Äî to purchase homes. As a result, more people exit the rental market, lowering demand for rental housing and placing downward pressure on rents. Our results show that as demand for owner-occupied housing increases and demand for rental housing drops, real estate investors sell homes to owner-occupier households. The homeownership rate increases, house prices increase, and rents decrease.\n",
        "\n",
        "To conduct our analysis, we developed a new residential rent index, the ADH Repeat-Rent Index, which measures changes in rent prices over time on a quality-adjusted basis. We compiled a dataset of more than 30 million rental listings, covering over 5,000 ZIP codes across the United States. Using this data, and applying a statistical technique known as local projections, we estimate how rents change in response to monetary policy shocks‚Äîunexpected changes in interest rates. Figure 2 illustrates our main results. It plots how a 25-basis-point decrease in the 30-year fixed rate mortgage impacts rent inflation 0-24 months going forward. A drop in mortgage rates lowers nominal rent inflation by 0.7 percent 12 months following the rate cut, and by 1.4 percent 24 months following the cut. In the paper, we also find that following a drop in interest rates, the inventory of rental units increases, and units remain listed on the market for longer. This indicates a drop in demand in the rental market and rationalizes why lower rates lead to lower rents.\n",
        "\n",
        "With the next FOMC meeting in sight, policymakers will be monitoring how tariff policies are transmitted into prices and whether deteriorating labor market conditions persist. A key indicator that policymakers should also be tracking is rent inflation. In its most recent July reading, annual rent inflation according to the CPI shelter index was 3.7 percent ‚Äî well above the Fed‚Äôs 2 percent target. Overall inflation might increase if the Fed decides to cut rates, but our analysis shows that expansionary policy can cool rent inflation, softening the blow.\"\"\"\n",
        "\n",
        "# Write the text into a .txt file\n",
        "with open(\"mytext.txt\", \"w\", encoding=\"utf-8\") as f:\n",
        "    f.write(text)\n",
        "\n",
        "print(\"‚úÖ Saved mytext.txt\")\n",
        "\n",
        "# Load your saved .txt file\n",
        "with open(\"mytext.txt\", encoding=\"utf-8\") as f:\n",
        "    raw = f.read()\n",
        "\n",
        "print(raw[:500])  # print first 500 characters\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "f60cb2b1",
      "metadata": {
        "id": "f60cb2b1"
      },
      "source": [
        "\n",
        "**Q:** Which text did you choose and why? *(Write a 1‚Äì2 sentence note below.)*\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "I chose this passage because interest rate cuts are a current hot topic ‚Äî the Fed has been hesitant to lower rates due to inflation concerns, while this article presents the opposite view, arguing that expansionary policy could actually cool rent inflation."
      ],
      "metadata": {
        "id": "o5RRs6k8dpWq"
      },
      "id": "o5RRs6k8dpWq"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b98b454a",
      "metadata": {
        "id": "b98b454a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c397269b-b690-46ff-bc17-cef8281e6488"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "I selected this passage because it offers a counterintuitive perspective on a timely policy issue ‚Äî while the Fed fears that rate cuts may fuel inflation, the text argues they can instead ease rent inflation.\n",
            "\n"
          ]
        }
      ],
      "source": [
        "\n",
        "# Your short reflection:\n",
        "choice_note = \"\"\"\n",
        "I selected this passage because it offers a counterintuitive perspective on a timely policy issue ‚Äî while the Fed fears that rate cuts may fuel inflation, the text argues they can instead ease rent inflation.\n",
        "\"\"\"\n",
        "print(choice_note)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "7fc2e3e5",
      "metadata": {
        "id": "7fc2e3e5"
      },
      "source": [
        "\n",
        "## Part B ‚Äî Tokenize & Explore (10 min)\n",
        "Lowercase and keep only alphabetic tokens (drop punctuation/numbers) for a quick clean view.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ea7ba1f7",
      "metadata": {
        "id": "ea7ba1f7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4908ba61-230c-4f3b-bdc5-401fa7cda2c5"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(328,\n",
              " ['why',\n",
              "  'do',\n",
              "  'rents',\n",
              "  'drop',\n",
              "  'in',\n",
              "  'response',\n",
              "  'to',\n",
              "  'expansionary',\n",
              "  'monetary',\n",
              "  'policy',\n",
              "  'when',\n",
              "  'interest',\n",
              "  'rates',\n",
              "  'drop',\n",
              "  'borrowing',\n",
              "  'becomes',\n",
              "  'less',\n",
              "  'expensive',\n",
              "  'making',\n",
              "  'it'])"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "\n",
        "from nltk.tokenize import word_tokenize\n",
        "\n",
        "# Tokenize: split into tokens, lowercase them, keep alphabetic tokens only\n",
        "tokens = [w.lower() for w in word_tokenize(raw) if w.isalpha()]\n",
        "len(tokens), tokens[:20]\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "662866aa",
      "metadata": {
        "id": "662866aa"
      },
      "source": [
        "\n",
        "**Questions:**  \n",
        "1) How many tokens (words) are in your text?  \n",
        "2) List 5 tokens you expected to see. Were they present?\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "328/ interest, rent, increase, decrease,expensive"
      ],
      "metadata": {
        "id": "m3jg-5qVe1Cf"
      },
      "id": "m3jg-5qVe1Cf",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "id": "9c014826",
      "metadata": {
        "id": "9c014826"
      },
      "source": [
        "\n",
        "## Part C ‚Äî Keyword in Context (10 min)\n",
        "Use *concordance* to see your keywords in context.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "21a6358a",
      "metadata": {
        "id": "21a6358a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bc2cf164-6c17-4022-efdf-d43ab574eb26"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Displaying 3 of 3 matches:\n",
            "ansionary monetary policy when interest rates drop borrowing becomes l\n",
            " to monetary policy changes in interest rates figure illustrates our m\n",
            " find that following a drop in interest rates the inventory of rental \n",
            "Displaying 6 of 6 matches:\n",
            "ed rate mortgage impacts rent inflation months going forward a drop i\n",
            "age rates lowers nominal rent inflation by percent months following t\n",
            "ould also be tracking is rent inflation in its most recent july readi\n",
            "cent july reading annual rent inflation according to the cpi shelter \n",
            " fed s percent target overall inflation might increase if the fed dec\n",
            "nsionary policy can cool rent inflation softening the blow\n"
          ]
        }
      ],
      "source": [
        "\n",
        "from nltk.text import Text\n",
        "T = Text(tokens)\n",
        "\n",
        "# Try two policy keywords of interest (edit these):\n",
        "T.concordance(\"interest\", width=70, lines=12)\n",
        "T.concordance(\"inflation\", width=70, lines=12)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "d5c80aaf",
      "metadata": {
        "id": "d5c80aaf"
      },
      "source": [
        "\n",
        "**Prompt:** In 2‚Äì3 sentences, what do the surrounding words suggest about how these topics are framed?\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "3lcF3qJcfofI"
      },
      "id": "3lcF3qJcfofI"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ff99be15",
      "metadata": {
        "id": "ff99be15",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "46825437-c56e-490c-b18c-708cd32876db"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "The surrounding words frame both topics analytically, focusing on cause and effect-how monetary policy change influence rent inflation. The tone is data-driven and policy-oriented. \n",
            "\n"
          ]
        }
      ],
      "source": [
        "\n",
        "analysis_notes = \"\"\"\n",
        "The surrounding words frame both topics analytically, focusing on cause and effect-how monetary policy change influence rent inflation. The tone is data-driven and policy-oriented.\n",
        "\"\"\"\n",
        "print(analysis_notes)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "a5dfbf37",
      "metadata": {
        "id": "a5dfbf37"
      },
      "source": [
        "\n",
        "## Part D ‚Äî Dispersion Plot (10 min)\n",
        "Where do topics appear (beginning/middle/end)? Replace terms with 3‚Äì5 of your own.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d213dbeb",
      "metadata": {
        "id": "d213dbeb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "outputId": "ba91b679-4a3b-46da-af37-6151817a2910"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "\n",
        "# NLTK's dispersion_plot uses matplotlib under the hood\n",
        "T.dispersion_plot([\"rent\", \"interest\", \"inflation\"])\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "f37b8dff",
      "metadata": {
        "id": "f37b8dff"
      },
      "source": [
        "\n",
        "**Prompt:** What patterns do you notice? Why might this matter for policy framing?\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "611a3062",
      "metadata": {
        "id": "611a3062",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b7aab025-2865-444e-c72e-3b3b05e37dac"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "The words \"rent\" \"interest\" and \"inflation\"appear repeatedly and in close proximity, showing they're discussed togehter throughout the text.\n",
            "\n"
          ]
        }
      ],
      "source": [
        "\n",
        "framing_notes = \"\"\"\n",
        "The words \"rent\" \"interest\" and \"inflation\"appear repeatedly and in close proximity, showing they're discussed togehter throughout the text.\n",
        "\"\"\"\n",
        "print(framing_notes)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "215840fc",
      "metadata": {
        "id": "215840fc"
      },
      "source": [
        "\n",
        "## Part E ‚Äî Lexical Diversity (10 min)\n",
        "Lexical diversity = unique words / total words. Use a fixed slice for fair comparisons.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "24ddddea",
      "metadata": {
        "id": "24ddddea",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5f28eb91-f32c-4587-e490-e6d388f9af6f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Lexical diversity (all tokens): 0.5396\n",
            "Lexical diversity (first 100): 0.72\n"
          ]
        }
      ],
      "source": [
        "\n",
        "def lexical_diversity(tok_list, n=None):\n",
        "    \"\"\"Return unique/total; if n is provided, compute on first n tokens.\"\"\"\n",
        "    if n:\n",
        "        tok_list = tok_list[:n]\n",
        "    total = len(tok_list) if tok_list else 1\n",
        "    return len(set(tok_list)) / total\n",
        "\n",
        "div_all = lexical_diversity(tokens)\n",
        "div_1h  = lexical_diversity(tokens, 100)\n",
        "\n",
        "print(\"Lexical diversity (all tokens):\", round(div_all, 4))\n",
        "print(\"Lexical diversity (first 100):\", round(div_1h, 4))\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "b8e24c2e",
      "metadata": {
        "id": "b8e24c2e"
      },
      "source": [
        "\n",
        "**Why it matters (policy analysis):** Differences in lexical diversity can reflect changes in audience targeting, technicality vs. accessibility, or agenda breadth (e.g., a narrow crisis speech vs. a broad programmatic agenda).  \n",
        "\n",
        "*(Optional)* Compare with a second speech by repeating Part A for another `fileid` and recomputing diversity on the same slice size.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "cc289ee1",
      "metadata": {
        "id": "cc289ee1"
      },
      "source": [
        "\n",
        "## Part F ‚Äî Reflection (10 min)\n",
        "- Which tool felt most useful for policy analysis (concordance, dispersion, lexical diversity)? Why?  \n",
        "- How could you apply this to a real policy dataset (hearings, legislation, news, social media)?\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "1ef83bef",
      "metadata": {
        "id": "1ef83bef",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7d6787c3-daf4-417a-8ef7-a295bee039bf"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "For policy analysis, lexical diversity felt most useful because it quantifies how complex, technical, or inclusive a policy message is. This method could be applied to \n",
            "real policy texts to track shifts in tone and accessibility.\n",
            "\n"
          ]
        }
      ],
      "source": [
        "\n",
        "final_reflection = \"\"\"\n",
        "For policy analysis, lexical diversity felt most useful because it quantifies how complex, technical, or inclusive a policy message is. This method could be applied to\n",
        "real policy texts to track shifts in tone and accessibility.\n",
        "\"\"\"\n",
        "print(final_reflection)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "4a38ee4c",
      "metadata": {
        "id": "4a38ee4c"
      },
      "source": [
        "\n",
        "---\n",
        "## üöÄ Stretch Challenges (Optional)\n",
        "\n",
        "### 1) Collocations (common policy phrases)\n",
        "Find frequently co-occurring word pairs (bigrams). These can reveal informative policy phrases (e.g., *national security*, *climate change*).\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ccf4b77b",
      "metadata": {
        "id": "ccf4b77b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ace70ff8-999d-4e00-da49-41bd7cd56056"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[('interest', 'rates'),\n",
              " ('demand', 'for'),\n",
              " ('rent', 'inflation'),\n",
              " ('drop', 'in'),\n",
              " ('a', 'drop'),\n",
              " ('in', 'the')]"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ],
      "source": [
        "\n",
        "from nltk.collocations import BigramAssocMeasures, BigramCollocationFinder\n",
        "\n",
        "# Use a filtered token list (already lowercase & alphabetic)\n",
        "finder = BigramCollocationFinder.from_words(tokens)\n",
        "# Only consider reasonably frequent bigrams (adjust min_freq to taste)\n",
        "finder.apply_freq_filter(3)\n",
        "bigrams_pmi = finder.nbest(BigramAssocMeasures.pmi, 15)\n",
        "bigrams_pmi\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "bcc38a52",
      "metadata": {
        "id": "bcc38a52"
      },
      "source": [
        "\n",
        "### 2) VADER sentiment on short snippets\n",
        "Useful for very short statements (tweets, headlines). For long speeches, sentiment averages toward neutral.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e0ee8fde",
      "metadata": {
        "id": "e0ee8fde",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0debe3a8-fd1b-42de-b141-8f4636e24cb8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The fear is that by lowering interest rates, the Fed may stimulate the economy and increase inflation. -> {'neg': 0.213, 'neu': 0.492, 'pos': 0.295, 'compound': 0.25}\n",
            "This indicates a drop in demand in the rental market and rationalizes why lower rates lead to lower rents. -> {'neg': 0.364, 'neu': 0.636, 'pos': 0.0, 'compound': -0.7184}\n",
            "Overall inflation might increase if the Fed decides to cut rates, but our analysis shows that expansionary policy can cool rent inflation, softening the blow. -> {'neg': 0.055, 'neu': 0.782, 'pos': 0.163, 'compound': 0.4678}\n"
          ]
        }
      ],
      "source": [
        "\n",
        "# VADER is in nltk.sentiment\n",
        "nltk.download('vader_lexicon', quiet=True)\n",
        "from nltk.sentiment import SentimentIntensityAnalyzer\n",
        "\n",
        "sia = SentimentIntensityAnalyzer()\n",
        "\n",
        "samples = [\n",
        "    \"The fear is that by lowering interest rates, the Fed may stimulate the economy and increase inflation.\",\n",
        "    \"This indicates a drop in demand in the rental market and rationalizes why lower rates lead to lower rents.\",\n",
        "    \"Overall inflation might increase if the Fed decides to cut rates, but our analysis shows that expansionary policy can cool rent inflation, softening the blow.\"\n",
        "]\n",
        "\n",
        "for s in samples:\n",
        "    print(s, \"->\", sia.polarity_scores(s))\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "f3478974",
      "metadata": {
        "id": "f3478974"
      },
      "source": [
        "\n",
        "### 3) Compare two texts (quick)\n",
        "Repick another `fileid` and compute lexical diversity on the same slice (e.g., 2,000 tokens). What differences do you see?\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "5a6c18f2",
      "metadata": {
        "id": "5a6c18f2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b4cac96c-2543-4f2d-f0f1-93e483c05b04"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "A: 2009-Obama.txt div(2k) = 0.3915\n",
            "B: 2025-Trump.txt div(2k) = 0.353\n"
          ]
        }
      ],
      "source": [
        "\n",
        "fileids = inaugural.fileids()\n",
        "s1 =fileids[-5]\n",
        "s2 = fileids[-1]\n",
        "raw1 = inaugural.raw(s1)\n",
        "raw2 = inaugural.raw(s2)\n",
        "tokens1 = [w.lower() for w in word_tokenize(raw1) if w.isalpha()]\n",
        "tokens2 = [w.lower() for w in word_tokenize(raw2) if w.isalpha()]\n",
        "print(\"A:\", s1, \"div(2k) =\", round(lexical_diversity(tokens1, 2000), 4))\n",
        "print(\"B:\", s2, \"div(2k) =\", round(lexical_diversity(tokens2, 2000), 4))\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "b32b9bbe",
      "metadata": {
        "id": "b32b9bbe"
      },
      "source": [
        "\n",
        "### 4) Quick frequency table + matplotlib bar chart\n",
        "Show top 15 tokens (after simple cleaning). *Keep charts simple and readable.*\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "1d139120",
      "metadata": {
        "id": "1d139120",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 407
        },
        "outputId": "8cdf3884-730e-498f-ad99-abcfd67649b0"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "\n",
        "from nltk import FreqDist\n",
        "from nltk.corpus import stopwords\n",
        "import matplotlib.pyplot as plt\n",
        "stops = set(stopwords.words(\"english\"))\n",
        "filtered_tokens = [t for t in tokens if t not in stops]\n",
        "\n",
        "fd = FreqDist(filtered_tokens)\n",
        "top = fd.most_common(10)\n",
        "\n",
        "labels, counts = zip(*top)\n",
        "plt.figure(figsize=(10,4))\n",
        "plt.bar(range(len(labels)), counts)\n",
        "plt.xticks(range(len(labels)), labels, rotation=45, ha='right')\n",
        "plt.title(\"Top 15 tokens\")\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "language_info": {
      "name": "python"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}